// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    if (root == NULL){
        return;
    }
    findPreSuc(root->left, pre, suc, key);
    if ((pre == NULL || pre->key < root->key) && root->key < key)
        pre = root;
    if ((suc == NULL || suc->key > root->key) && root->key > key)
        suc = root;    
    findPreSuc(root->right, pre, suc, key);
}

or (Iterative)

void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
	if (root == NULL)
		return;
		
	while (root != NULL) {	
		if (root->key == key){
			if (root->left){
				pre = root->left;
				while (pre->right){
					pre = pre->right;
				}
			}
			if (root->right){
				suc = root->right;
				while (suc->left){
					suc = suc->left;
				}
			}
			return;
		}
		if (root->key > key){
			suc = root;
			root = root->left;
		}
		else if (root->key < key){
			pre = root;
			root = root->right;
		}
	}
}