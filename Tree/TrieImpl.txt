#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct trieNode
{
	char ch;
	unordered_map <int, trieNode*> m;
	bool isLast;
	
	trieNode()
	{}
	trieNode(const char& c)
	: ch(c), isLast(false)
	{}
};

struct trie
{
	trieNode root;
	
	trie()
	: root('\0')
	{}
	
	void insert(string word)
	{
		insert(&root, word);
	}
	
	void insert(trieNode* r, string word)
	{
		if (word.length() <= 0)
			return;
		char c = word[0];
		int idx = c - 'a';
		trieNode* n;
		if (r->m.find(idx) != r->m.end())
		{
		    trieNode* tm = r->m[idx];
		    n = tm;
		}
		else
		{
			n = new trieNode(c);
			r->m[idx] = n;
		}
		if (word.length() > 1)
			insert (n, word.substr (1));
		else
			n->isLast  = true;
	}
	
	bool search(string word)
	{
		if (word.length() <= 0)
			return false;
		return search(root, word);
	}
	
	bool search(trieNode r, string word)
	{
		if (word.length() <= 0)
			return false;
		char c = word[0];
		int idx = c - 'a';
		trieNode n;
		if (r.m.find(idx) != r.m.end())
		{
			n = *(r.m[idx]);
		}
		else
		{
			return false;
		}
		if(word.length() > 1)
			return search (n, word.substr (1));
		else
			return n.isLast;
	}
	
	void printTrie()
	{
	    print(root);
	}
	
	void print(trieNode r)
	{
	    if (r.ch != root.ch)
	        cout << r.ch << " " << r.isLast << endl;
	    for (auto it = r.m.begin(); it != r.m.end(); ++it)
	    {
	        trieNode n = *(it->second);
	        print (n);
	    }
	}
};
int main() {
	trie t;
	t.insert("cat");
    t.insert("test");
    t.insert("testing");
    // t.printTrie();
    cout << t.search("cat") << endl;
	return 0;
}
