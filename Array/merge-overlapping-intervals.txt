/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
bool compare (const Interval& a, const Interval& b)
{
    return a.start < b.start;
}
vector<Interval> Solution::merge(vector<Interval> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    sort (A.begin(), A.end(), compare);
    int index = 0;
    for (int i = 1; i < A.size (); ++i)
    {
        Interval& last = A [index];
        if (A [i].start <= last.end){
            last.end = max (A [i].end, last.end);
            last.start = min (A[i].start, last.start);
        }
        else
        {
            A [++index] = A [i];
        }
    }
    A.erase (A.begin ()+index+1, A.end());
    return A;
}
