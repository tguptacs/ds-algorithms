//The first line of input contains an element T denoting the number of test cases. Then T test cases follow. Each test case consist of 2 lines. The first line of each test case contains a number denoting the size of the array A. Then in the next line are space separated values of the array A.
//
//Output:
//For each test case output will be the length of the largest subarray which has sum 0.
//
//User Task:
//Sinec this is a functional problem you don't have to worry about input, you just have to complete the function maxLen().
//
//Constraints:
//1 <= T <= 100
//1 <= N <= 100
//-1000 <= A[] <= 1000
//
//Example:
//Input
//1
//8
//15 -2 2 -8 1 7 10 23
//
//Output
//5

int maxLen(int A[],int n)
{
  int len = 0;
  int sum = 0;
  int i = 0;
  unordered_map <int,int> m;
  for (int i = 0; i < n ; ++i){
      sum += A[i];
      if (m.find (sum) != m.end ()){
          int temp = i - m[sum];
          if (temp > len)
            len = temp;
      }
      else
        m [sum] = i;
  }
  if (sum == 0)
    return n;
  return len;
}