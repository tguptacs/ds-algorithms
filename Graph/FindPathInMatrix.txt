#include <iostream>
#include <bits/stdc++.h>
using namespace std;

bool isSafe (int i, int j, int N, vector <vector<int>> v){
    if (i < 0 || i >= N || j < 0 || j >= N)
        return false;
    if (v [i][j] == 2 || v [i][j] == 3)
        return true;
    return false;    
}
int bfs (vector <vector<int>> v, int i, int j, int N){
    int d [][2] = {{0,-1}, {-1,0}, {1,0}, {0,1}};
    queue <pair <int,int>> q;
    q.push (make_pair (i, j));
    vector <vector <bool>> visited (N, vector<bool> (N, false));
    while (!q.empty ()){
        pair<int,int> p = q.front ();
        q.pop ();
        i = p.first;
        j = p.second;
        visited [i][j] = true;
        for (int k = 0; k < 4; ++k){
            int ni = i + d [k][0];
            int nj = j + d [k][1];
            if (isSafe (ni, nj, N, v) && !visited [ni][nj]){
                if (v [i][j] == 2)
                    return 1;
                else
                    q.push (make_pair (ni, nj));
            }
        }
    }
    return 0;
}

int checkPath (vector <vector<int>> v, int N){
    int i = 0;
    int j = 0;
    bool sourceFound = false;
    for (i = 0; i < N; ++i) {
        for (j = 0; j < N ; ++j){
             if (v[i][j] == 1){
                sourceFound = true;
                break;
            }
        }
        if (sourceFound)
            break; 
    } 
    return bfs (v, i, j, N);
}
int main() {
	int test = 0;
	cin >> test;
	while (test-- > 0){
	    int N = 0;
	    cin >> N;
	    vector <vector<int>> v (N, vector<int> (N, 0));
	    for (int i = 0; i < N; i++)
	        for (int j = 0; j < N; j++)
	            cin >> v [i][j];
	            
	    cout << checkPath (v, N) << endl;         
	}
	return 0;
}