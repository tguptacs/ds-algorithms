Input: n = 6, edges = [[1, 4], [4, 5], [2, 3]], newEdges = [[1, 2, 5], [1, 3, 10], [1, 6, 2], [5, 6, 5]]



int parent [n] = {0};
int component = 1;

int FIND (int v){
	if (v == parent [v])
		return v;
	FIND (parent [v]);	
}

void connect (int s, int d){
	if (FIND (s) == FIND (d))
		return;
	
	int rootS = FIND (s);
	int rootD = FIND (d);
	parent [rootD] = rootS;
	component --;
}

bool compare (vector<int> v1, vector <int> v2){
	return v1 [2] < v2 [2];
}

public int minCosttoConnectAllNodes(int n, vector <vector<int>> edges, vector<vector<int>> newEdges){

	for (int i = 0; i < n; ++i)
		parent [i] = i;

	for (int i = 0; i < edges.size (); ++i){
		vector <int> v = edges [i];
		connect (v [0], v[1]);
	}
	
	sort (newEdges.begin(), newEdges.end (), compare);
	
	int cost = -1;
	for (int i = 0; i < newEdges.size (); ++i){
		vector <int> v = newEdges [i];
		
		if (FIND (v[0]) != FIND (v[1])){
			connect (v [0], v [1]);
			cost += v [2];
		}
		if (component == 1)
			break;
	}
	return cost;
}
    