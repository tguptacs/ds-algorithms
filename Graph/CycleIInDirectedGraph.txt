{
#include <bits/stdc++.h>
using namespace std;
//Position this line where user code will be pasted.
int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int v, e;
	    cin >> v >> e;
	    
	    vector<int> adj[v];
	    
	    for(int i =0;i<e;i++){
	        int u, v;
	        cin >> u >> v;
	        adj[u].push_back(v);
	    }
	    
	    cout << isCyclic(v, adj) << endl;
	    
	}
	
	return 0;
}
}
/*This is a function problem.You only need to complete the function given below*/
/*  Function to check if the given graph contains cycle
*   V: number of vertices
*   adj[]: representation of graph
*/
bool cyclicUtil (int v, vector<int> adj[], bool visited[], bool rec[]){
    visited[v] = true;
    rec[v] = true;
    
    vector <int>::iterator it;
    for (it = adj[v].begin (); it != adj[v].end (); ++it){
        if (!visited [*it]){
            if (cyclicUtil (*it, adj, visited, rec))
                return true;
        }
        else if (rec [*it] == true)
            return true;
    }
    rec [v] = false;
    return false;    
}

bool isCyclic(int V, vector<int> adj[])
{
    bool visited [V] = {false};
    bool rec[V] = {false};
    for (int i = 0; i < V; ++i){
        if (!visited [i]){
            if (cyclicUtil (i, adj, visited, rec))
                return true;
        }
    }
    return false;
}