//LCA of BST (binary search tree)
Node* LCA(Node *root, int n1, int n2)
{
	if (root == NULL)
		return NULL;
	if ((n1 <= root->data && n2 >= root->data)
		|| (n2 <= root->data && n1 >= root->data))
		return root;
	if (n1 < root->data)
		return LCA (root->left, n1, n2);
	else
		return LCA (root->right, n1, n2);	
}

/* If n1 and n2 are present, return pointer
   to LCA. If both are not present, return 
   NULL. Else if left subtree contains any 
   of them return pointer to left.*/
Node * lca(Node* root ,int n1 ,int n2 )
{
    if (root == NULL)
		return NULL;
	if (root->data == n1 || root->data == n2)
		return root;
	Node* left = lca (root->left, n1, n2);
	Node* right = lca (root->right, n1, n2);
	if (left && right)
		return root;
	if (left)
		return left;
	if (right)
		return right;
	return NULL;
}

bool isIdentical(Node *r1, Node *r2)
{
	if (!r1 && !r2)
		return true;
	if (!r1 || !r2)
		return false;
	if (r1->data != r2->data)
		return false;
	return isIdentical (r1->left, r2->left) && isIdentical (r1->right, r2->right);
}

int height (Node* root){
	if (root == NULL)
		return 0;
	return 1 + max (height (root->left), height (root->right));	
}

bool isBalanced(Node *root)
{
    if (root == NULL)
		return true;
		
	if (isBalanced (root->left) && isBalanced (root->right))
		return abs (height (root->left) - height (root->right)) <= 1;
	else	
		return false;	
}

//ZigZag								
//			1
//		2		  3
//	7		6 5			4
//	
//output:
//	1 2 3 4 5 6 7
void printSpiral(Node *root)
{
    if (root == NULL)
		return;
		
	stack <Node*> s1;
	stack <Node*> s2;
	
	int leftToWrite = 1;
	s1.push (root);
	while (!s1.empty ()){
		Node* temp = s1.top ();
		s1.pop ();
		if (temp) {
			cout << temp->data << " ";
			if (leftToWrite)
			{
				if (temp->right)
					s2.push (temp->right);
				if (temp->left)
					s2.push (temp->left);
			}
			else{
				if (temp->left)
					s2.push (temp->left);
				if (temp->right)
					s2.push (temp->right);
			}
		}
		if (s1.empty ())
		{
			if (!s2.empty ()){
				stack <Node*> temp = s1;
				s1 = s2;
				s2 = temp;
			}
			leftToWrite = !leftToWrite;
		}		
	}
}

void verticalUtil (Node* root, map <int, vector<int>> &m, int col){
	if (root == NULL)
		return;
	if (m.find (col) == m.end ()){
		vector <int> v;
		v.push_back (root->data);
		m.insert (make_pair (col, v));
	}else{
		m [col].push_back (root->data);
	}
	verticalUtil (root->left, m, col-1);
	verticalUtil (root->right, m, col+1);
}
void verticalOrder(Node *root)
{
    if (root == NULL)
		return;
	
	map <int, vector <int>> m;
	verticalUtil (root, m, 0);
	
	for (map <int, vector<int>>::iterator it = m.begin (); it != m.end (); ++it){
		vector <int> v = it->second;
		for (vector<int>::iterator i = v.begin (); i != v.end (); ++i)
			cout << *i << " ";
	}
}

void bottomViewUtil (Node* root, map <int, int> &m, int col){
	if (root == NULL)
		return;
	if (m.find (col) == m.end ()){
		m.insert (make_pair (col, root->data));
	}else{
		m [col] = root->data;
	}
	bottomViewUtil (root->left, m, col-1);
	bottomViewUtil (root->right, m, col+1);
}
void bottomView(Node *root)
{
    if (root == NULL)
		return;
	
	map <int, int> m;
	bottomViewUtil (root, m, 0);
	
	for (map <int, int>::iterator it = m.begin (); it != m.end (); ++it){
		cout << it->second << " ";
	}
}

// Calculate Max, Min(Bottom up, check BST left,right)
bool isBstUtil (Node* root, int &mx, int &mn){
	if (root == NULL){
		return true;
	}
	int maxx = root->data;
	int minn = root->data;
	if (!isBstUtil (root->left, maxx, mn)
		|| !isBstUtil (root->right, mx, minn))
		return false;
	if (!root->left && !root->right){
		mx = mn = root->data;
		return true;
	}
	mx = max (root->data, maxx);
	mx = max (maxx, minn);
	mn = minn < root->data ? minn : root->data;
	mn = mn < maxx ? mn : maxx;
	if (!root->left){
		return root->data < minn;
	}
	else if (!root->right)
		return maxx < root->data;
	return maxx < root->data && root->data < minn;	
}
bool isBST(Node* root) {
    if (root == NULL)
		return true;
	int mx = 0;
    int	mn = 0;
	return isBstUtil (root, mx, mn);
}

// Calculate Max, Min(Top Down)
bool isBstUtil (Node* root, int mx, int mn){
	if (root == NULL)
		return true;
	return root->data > mn && root->data < mx &&
	    isBstUtil (root->left, root->data, mn) && 
	    isBstUtil (root->right, mx, root->data);	
}

bool isBST(Node* root) {
    if (root == NULL)
		return true;
	return isBstUtil (root, INT_MAX, INT_MIN);
}

//one way to check previous in order traversal(if smaller than current)

bool isBstUtil (Node* root, int* prev){
	if (root == NULL)
		return true;
	if (!isBstUtil (root->left, prev))
		return false;
	if (root->data < *prev)
		return false;
	*prev = root->data;
	if (!isBstUtil (root->right, prev))
		return false;
	return true;
}

bool isBST(Node* root) {
    if (root == NULL)
		return true;
	int m = INT_MIN;	
	return isBstUtil (root, &m);
}

//Connect Nodes at same level, find next sibling

     10                       10 ------> NULL
      / \                       /      \
     3   5       =>     3 ------> 5 --------> NULL
    / \     \               /  \           \
   4   1   2          4 --> 1 -----> 2 -------> NULL
   
// Should set the nextRight for all nodes
Node* getNextRight (Node* p){
	if (p == NULL)
		return NULL;
	if (p->nextRight && p->nextRight->left)
			return p->nextRight->left;
	else if (p->nextRight && p->nextRight->left)
		return p->nextRight->right;
	else
		return NULL;		
}
   
void connect(Node *p)
{
	if (p == NULL)
		return;
	if (p->left){
		if (p->right)
			p->left->nextRight = p->right;
		else
			p->left->nextRight = getNextRight (p);	
	}
	if (p->right)
		p->right->nextRight = getNextRight (p);	

	connect (p->left);
	connect (p->right);
}
   
//Serialize and Deserialize a Binary Tree

/*this  function serializes 
the binary tree and stores 
it in the vector A*/
// PreOrder and Save -1(Marker) for NULL child
void serialize(Node *root,vector<int> &A)
{
    if (root == NULL){
		A.push_back (-1);
		return;
    }
	A.push_back (root->data);
	serialize (root->left, A);
	serialize (root->right, A);
}
/*this function deserializes
 the serialized vector A*/
Node * deSerialize(vector<int> &A)
{
	if (A.empty ())
		return NULL;
	int data = A [0];
	A.erase (A.begin ());
	
	if (data == -1)
		return NULL;
	Node* temp = new Node ();
	temp->data = data;
	temp->left = deSerialize (A);
	temp->right = deSerialize (A);
	return temp;
}

// This function should convert a given Binary tree to Doubly
// Linked List
void bToDLLUtil (Node* root, Node** head, Node* &prev){
	if (root == NULL)
		return;
	bToDLLUtil (root->left, head, prev);
	if (prev == NULL)
	{
		*head = root;
		prev = root;
	}
	else{
		prev->right = root;
		root->left = prev;
		prev = prev->right;
	}
	bToDLLUtil (root->right, head, prev);
}
void bToDLL(Node *root, Node **head_ref)
{
	if (root == NULL)
		return;
	Node* prev = NULL;
	bToDLLUtil (root, head_ref, prev);	
}

// BST to circular DLL
Node* appendList (Node* a, Node* b){
	if (!a && !b)
		return NULL;
	if (!a)
		return b;
	if (!b)
		return a;
	
	Node* aLast = a->left;
	aLast->right = b;
	b->left = aLast;
	Node* bLast = b->left;
	bLast->right = a;
	a->left = bLast;
	return a;
}
Node* bToDLLUtil (Node *root, Node **head_ref){
    if (root == NULL)
		return NULL;
	Node* left = bToDLLUtil (root->left, head_ref);
	if (left == NULL && *head_ref == NULL)
		*head_ref = root;
	root->left = root;
	root->right = root;
	Node* right = bToDLLUtil (root->right, head_ref);
	Node* a = appendList (left, root);
	a = appendList (a, right);
	return a;
}
void bToDLL(Node *root, Node **head_ref)
{
	if (root == NULL)
	    return;
	bToDLLUtil (root, head_ref);    
}

//Fixing Two nodes of a BST
struct Node *correctBSTUtil( struct Node* root, struct Node* &prev, struct Node* &first )
{
	if (root == NULL)
		return NULL;
	correctBSTUtil (root->left, prev, first);
	if (prev){
		if (root->data < prev->data)
		{
			if (first){
				int data = first->data;
				first->data = root->data;
				root->data = data;
			}
			else
				first = prev;
		}
	}
	prev = root;
	correctBSTUtil (root->right, prev, first);
	return root;
}

struct Node *correctBST( struct Node* root )
{
    if (root == NULL)
		return NULL;
	struct Node* prev = NULL;
	struct Node* first = NULL;
	return correctBSTUtil (root, prev, first);	
}

//Construct Tree from Preorder Traversal
// function should return the root of the new binary tree formed
struct Node *constructTreeUtil(int n, int pre[], char preLN[], int &i)
{
    if (i >= n)
        return NULL;
    struct Node * t = new Node ();
    t->data = pre [i];
    if (preLN [i] == 'N'){
        i++;
        t->left = constructTreeUtil (n, pre, preLN, i);
        i++;
        t->right = constructTreeUtil (n, pre, preLN, i);
    }
    return t;
}

struct Node *constructTree(int n, int pre[], char preLN[])
{
    int i = 0;
    return constructTreeUtil (n, pre, preLN, i);
}
//Find Kth Smallest - O(log n)
//Augmentation Tree (Uses size of subtrees)
int treeSize (Node* root){
    if (root == NULL)
        return 0;
    return treeSize (root->left) + 1 + treeSize (root->right);    
}

int KthSmallestElement(Node *root, int k)
{
    if (root == NULL)
        return -1;
    int size = treeSize (root->left) + 1;
    
    if (size == k)
        return root->data;
    if (k < size)
        return KthSmallestElement (root->left, k);
    else
        return KthSmallestElement (root->right, k-size);
}