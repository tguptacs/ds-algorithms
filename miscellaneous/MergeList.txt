#include <iostream>
using namespace std;

typedef struct node{
	int data;
	struct node* next;
	
	node (int data)
	: data (data),
	  next (NULL)
	{}
}Node;

Node* createList (int arr[], int size){
	Node* head = new Node (arr [0]);
	Node *t = head;
	for (int i = 1; i < size; ++i){
		Node* temp = new Node (arr [i]);
		t->next = temp;
		t = temp;
	}
	
	return head;
}

void printList (Node* head){
	Node* t = head;
	
	while (t != NULL){
		cout << t->data << " ";
		t = t->next;
	}
	cout << endl;
}

Node* mergeListRecursively (Node* h1, Node* h2){
	Node* result;
	if (h1 == NULL)
		return h2;
	if (h2 == NULL)
		return h1;
	if (h1->data < h2->data){
		result = h1;
		result->next = mergeListRecursively (h1->next, h2);
	}
	else{
		result = h2;
		result->next = mergeListRecursively (h1, h2->next);
	}
	return result;
}

Node* mergeListIteratively (Node* h1, Node* h2){
	Node* t1 = h1;
	Node* t2 = h2;
	Node* result = new Node(0);
	Node* r = result;
	while (t1 && t2){
		if (t1->data < t2->data){
			r->next = t1;
			t1 = t1->next;
		}
		else{
			r->next = t2;
			t2 = t2->next;
		}
		r = r->next;
	}
	if (t1 == NULL)
		r->next = t2;
	if (t2 == NULL)
		r->next = t1;
	
	r = result->next;
	free (result);
	return r;
}

int main (){
	int n = 3;
	int arr[n] = {0};
	for (int i = 0; i < n; ++i) arr [i] = (i+1)*2.5; 
	Node* head1 = createList (arr, sizeof(arr)/sizeof(arr[0]));
	
	for (int i = 0; i < n-1; ++i) arr [i] = (i+1)*1.5; 
	Node* head2 = createList (arr, sizeof(arr)/sizeof(arr[0]));
	printList (head1);
	printList (head2);
	Node* m = mergeListIteratively (head1, head2);
	printList (m);
}
