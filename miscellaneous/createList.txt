#include <iostream>
using namespace std;

typedef struct node{
	int data;
	struct node* next;
	
	node (int data)
	: data (data),
	  next (NULL)
	{}
}Node;

Node* createList (int arr[], int size){
	Node* head = new Node (arr [0]);
	Node *t = head;
	for (int i = 1; i < size; ++i){
		Node* temp = new Node (arr [i]);
		t->next = temp;
		t = temp;
	}
	
	return head;
}

void printList (Node* head){
	Node* t = head;
	
	while (t != NULL){
		cout << t->data << " ";
		t = t->next;
	}
	cout << endl;
}

Node* reversePair (Node* head){
	Node* r = head->next;
	
	Node* c = head;
	while (c && c->next){
		Node* temp = c->next->next;
		
		Node* s = c->next;
		s->next = c;
		if (temp && temp->next)
			c->next = temp->next;
		else
			c->next = temp;
		c = temp;	
	}
	return r;
}

Node* reversePairRecursively (Node* head){
	if (head == NULL)
		return NULL;
	if (head->next == NULL)
		return head;
		
	
	Node* temp = head->next->next;
	Node* h = head->next;
	h->next = head;
	head->next = reversePairRecursively (temp);
	return h;
}

Node* ReverseList (Node* head){
	Node* r = NULL;
	Node* s = head;
	
	while (s != NULL){
		Node* temp = s->next;
		s->next = r;
		r = s;
		s = temp;
	}
	return r;
}

Node* FindKthNode (Node* head, int n){
	if (head == NULL)
		return NULL;
	int i = 0;
	Node* temp = head;
	while (i < (n - 1) && temp){
		temp = temp->next;
		i++;
	}
	return temp;
}

Node* ReverseKPairs (Node* head, int n){
	Node* c = head;
	Node* r = FindKthNode (head, n);
	Node* ret = r;
	
	while (c && r){
	    Node* temp = r->next;
	    r->next = NULL;
		Node* rev = ReverseList (c);
		r = FindKthNode (temp, n);
	    c->next = r == NULL ? temp : r;
		c = temp;
	}
	return ret;
}


Node* ReverseKPairsRecursively (Node* head, int n){
	if (head == NULL)
		return NULL;
	Node* r = FindKthNode (head, n);
    if (r == NULL)
        return head;
	Node* temp = r->next;
	r->next = NULL;
	r = ReverseList (head);
	head->next = ReverseKPairsRecursively (temp, n);
	return r;
}

int main (){
	int n = 10;
	int arr[n] = {0};
	for (int i = 0; i < n; ++i) arr [i] = i+1; 
	Node* head = createList (arr, sizeof(arr)/sizeof(arr[0]));
	printList (head);
	Node* r = ReverseKPairsRecursively (head, 4);
	printList (r);
}
