#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef struct node{
	int data;
	struct node* left;
	struct node* right;
	node (int data)
	: data (data)
	{
		left = NULL;
		right = NULL;
	}
}Node;

Node* root = NULL;

Node* createTree (int a[], int index, int n){
	if (index >= n)
		return NULL;
	Node* root = new Node (a [index]);
	root->left = createTree (a, 2*index + 1, n);
	root->right = createTree (a, 2*index + 2, n);
	return root;	
}

void LevelOrderTraversal (Node* root){
	Node* temp = root;
	
	queue <Node*> q;
	q.push (temp);
	while (!q.empty ()){
		temp = q.front ();
		cout << temp->data << " ";
		q.pop ();
		if (temp->left)
			q.push (temp->left);
		if (temp->right)
			q.push (temp->right);
	}
}

void InOrderRecursively (Node* root){
	if (root == NULL)
		return;
	InOrderRecursively (root->left);
	cout << root->data << " ";
	InOrderRecursively (root->right);
}
void PreOrderRecursively (Node* root){
	if (root == NULL)
		return;
	cout << root->data << " ";
	PreOrderRecursively (root->left);
	PreOrderRecursively (root->right);
}
void PostOrderRecursively (Node* root){
	if (root == NULL)
		return;
	PostOrderRecursively (root->left);
	PostOrderRecursively (root->right);
	cout << root->data << " ";
}

void InorderTraversal (Node* root){
	cout << "Iteratively!" << endl;
	Node* temp = root;
	
	stack <Node*> s;
	do{
		while (temp != NULL){
			if (temp->right != NULL)
				s.push (temp->right);
			s.push (temp);	
			
			temp = temp->left;
		}
		temp = s.top ();
		cout << temp->data << " ";
		s.pop ();
		if (temp->right != NULL && s.top () == temp->right){
			s.pop ();
			temp = temp->right;
		}
		else
			temp = NULL;
	}while (!s.empty () || temp != NULL);
}

void PreorderTraversal (Node* root){
	cout << "Iteratively!" << endl;
	if (root == NULL)
		return;
		
	stack <Node*> s;
	s.push (root);
	while (!s.empty ()){
		root = s.top ();
		cout << root->data << " ";
		s.pop ();
		if (root->right != NULL)
			s.push (root->right);
		if (root->left != NULL)
			s.push (root->left);
	}
}

void PostorderTraversal (Node* root){
	cout << "Iteratively!" << endl;
	if (root == NULL)
		return;
		
	stack <Node*> s;
	do{
		while (root != NULL){
			if (root->right != NULL)
				s.push (root->right);
			s.push (root);	
			root = root->left;
		}
		root = s.top ();
		s.pop ();
		if (!s.empty () && root->right != NULL && root->right == s.top ()){
			Node* temp = s.top ();
			s.pop ();
			s.push (root);
			root = temp;
		}
		else{
			cout << root->data << " ";
			root = NULL;
		}
	}while (!s.empty ());
}

void Inorder (Node *root){
    cout << "Inorder" << endl;
    stack <Node*> s;
    
    do{
        while (root != NULL){
            if (root->right)
                s.push (root->right);
            s.push (root);
            root = root->left;
        }
        root = s.top ();
        s.pop ();
        cout << root->data << " ";
        if (!s.empty () && root->right != NULL && root->right == s.top ()){
            s.pop ();
            root = root->right;
        }
        else
            root = NULL;
    
    }while (!s.empty () || root != NULL);
}

// Threaded Binary Tree, Use Right NULL pointer to traverse the tree
Node* FindPredecessor (Node* root){
	if (root == NULL)
		return NULL;
	if (root == NULL || root->left == NULL)
		return NULL;
	Node* temp = root->left;
	while (temp->right != NULL){
	    if (temp->right == root)
	        return temp;
		temp = temp->right;
	}
	return temp;	
}

void InorderThreaded (Node* root){
	if (root == NULL)
		return;
	while (root != NULL){	
		Node* prev = FindPredecessor (root);
		if (prev){
			if (prev->right == root){
				prev->right = NULL;
				cout << root->data << " ";
				root = root->right;
			}
			else{
				prev->right = root;
				root = root->left;
			}
		}
		else{
			cout << root->data << " ";
			root = root->right;
		}
	}	
}

int main (){
	int n = 7;
	int a [n] = {0};
	for (int i = 0; i < n; ++i) a[i] = (i+1) * rand ();
	root = createTree (a, 0, n);
	bool recursiveTraversal = false;
	cout << "Level Order Traversal:" << endl;
	LevelOrderTraversal (root);
	cout << endl;
	cout << "In Order Traversal:" << endl;
	recursiveTraversal ? InOrderRecursively (root) : Inorder (root);
	cout << endl;
	cout << "Pre Order Traversal:" << endl;
	recursiveTraversal ? PreOrderRecursively (root) : PreorderTraversal (root);
	cout << endl;	
	cout << "Post Order Traversal:" << endl;
	recursiveTraversal ? PostOrderRecursively (root) : PostorderTraversal (root);
	cout << endl;	
	return 0;
} 