Push(x) : Inserts x at the top of stack.

If stack is empty, insert x into the stack and make minEle equal to x.
If stack is not empty, compare x with minEle. Two cases arise:
If x is greater than or equal to minEle, simply insert x.
If x is less than minEle, insert (2*x – minEle) into the stack and make minEle equal to x.
Pop() : Removes an element from top of stack.

Remove element from top. Let the removed element be y. Two cases arise:
If y is greater than or equal to minEle, the minimum element in the stack is still minEle.
If y is less than minEle, the minimum element now becomes (2*minEle – y), update (minEle = 2*minEle – y). Now retrieve previous minimum from current minimum and its value in stack.



}
/*This is a function problem.You only need to complete the function given below*/
/*
The structure of the class is as follows
class _stack{
stack<int> s;
int minEle;
public :
    int getMin();
    int pop();
    void push(int);
};
*/
/*returns min element from stack*/
int _stack :: getMin()
{
   if (s.empty ()){
        return -1;
   }
   return minEle;
}
/*returns poped element from stack*/
int _stack ::pop()
{
   if (s.empty ()){
        return -1;
   }
   int t = s.top ();
   s.pop ();
   if (!s.empty ()){
        if (t < minEle){
            int temp = minEle;
            minEle = 2*minEle - t;
            return temp;   
        }
   }
   return t;
}
/*push element x into the stack*/
void _stack::push(int x)
{
   if (s.empty ())
        minEle = x;
   if (x < minEle){
        s.push (2*x - minEle);
        minEle = x;
    }
    else
        s.push (x);
}