#include <iostream>
#include <bits/stdc++.h>
using namespace std;
map <pair<int,int>, vector <int>> m;

typedef struct node{
	int data;
	struct node* left;
	struct node* right;
	node (int data)
	: data (data)
	{
		left = NULL;
		right = NULL;
	}
}Node;

Node* root = NULL;

Node* createTree (int a[], int index, int n){
	if (index >= n)
		return NULL;
	Node* root = new Node (a [index]);
	root->left = createTree (a, 2*index + 1, n);
	root->right = createTree (a, 2*index + 2, n);
	return root;	
}

Node* FindPredecessor (Node* root){
	if (root == NULL)
		return NULL;
	if (root == NULL || root->left == NULL)
		return NULL;
	Node* temp = root->left;
	while (temp->right != NULL){
	    if (temp->right == root)
	        return temp;
		temp = temp->right;
	}
	return temp;	
}

void InorderThreaded (Node* root){
	if (root == NULL)
		return;
	while (root != NULL){	
		Node* prev = FindPredecessor (root);
		if (prev){
			if (prev->right == root){
				prev->right = NULL;
				cout << root->data << " ";
				root = root->right;
			}
			else{
				prev->right = root;
				root = root->left;
			}
		}
		else{
			cout << root->data << " ";
			root = root->right;
		}
	}	
}

void InOrderRecursively (Node* root){
	if (root == NULL)
		return;
	InOrderRecursively (root->left);
	cout << root->data << " ";
	if(root->right)
	    cout << "right: " << root->right->data << " ";
	InOrderRecursively (root->right);
}

void verticalUtil (Node* root, map <pair<int,int>, vector<int>> &m, int level, int col){
	if (root == NULL)
		return;
	pair <int,int> p (level, col);	
	if (m.find (p) == m.end ()){
		vector <int> v;
		v.push_back (root->data);
		m.insert (make_pair (p, v));
	}else{
		m [p].push_back (root->data);
	}
	verticalUtil (root->left, m, level+1, col-1);
	verticalUtil (root->right, m, level+1, col+1);
}
void verticalOrder(Node *root)
{
    if (root == NULL)
		return;
	
// 	map <pair<int,int>, vector <int>> m;
	verticalUtil (root, m, 0, 0);
	
 	for (map <pair<int,int>, vector<int>>::iterator it = m.begin (); it != m.end (); ++it){
 		vector <int> v = it->second;
 		for (vector<int>::iterator i = v.begin (); i != v.end (); ++i)
 			cout << *i << " ";
	
 		cout << endl;	
 	}
}

int PrintNode (vector <int> v, int spaces){

	for (int i=0;i < spaces; ++i)
		cout << "\t";

	for (vector<int>::iterator i = v.begin (); i != v.end (); ++i){
			cout << *i << " ";	
	}

	return spaces;// + 3;		
}

void PrintTree (map <pair<int,int>, vector<int>> m){
	int size = m.size ();
	int spaceSize = 2;
	int levels = 5;
	for (int i = 0; i < levels; ++i){
		int numberOfSpace = (size - i);
		int spaces = numberOfSpace*spaceSize;
		int j = -(i+1);
		for (int i=0;i < spaces; ++i)
		    cout << "\t";
		int temp = spaceSize; 
		for (;j < (i+1); ++j){
			pair <int,int> p (i,j);
			if (m.find (p) != m.end ()){
				temp = PrintNode (m[p], temp);
			}
			else
			    for (int i=0;i < spaceSize; ++i)
		            cout << "\t";
		}
		cout << endl;
	}
}
								1 
						2 				3 
				4 				5 6 				7 
		8 				9 10 12 				11 13 14 				15 
16 																

int main ()
{
	int n = 16;
	int a [n] = {0};
	for (int i = 0; i < n; ++i) a[i] = (i+1);// * rand ();
	root = createTree (a, 0, n);
// 	InOrderRecursively (root);
 	cout << endl;
	verticalOrder (root);
	cout << endl;
	PrintTree (m);
	return 0;
} 