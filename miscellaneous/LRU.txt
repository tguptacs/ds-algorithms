#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define HISTORY_SIZE 5

class Browser{
    list <string> m_urlVisitedList;
    typedef list<string>::iterator ListIterator;
    typedef list<string>::reverse_iterator ListRIterator;

    map <string, ListIterator> m_urlMap;
    typedef map <string, ListIterator>::iterator MapIterator;
    
 public:   
    void visitUrl (string url);
    vector<string> getHistory ();
};

void Browser::visitUrl (string url){
    if (m_urlVisitedList.size () > HISTORY_SIZE){
        string first = m_urlVisitedList.front ();
        m_urlVisitedList.pop_front ();
        if (m_urlMap.find (url) != m_urlMap.end ())
            m_urlMap.erase (first);
    }
    MapIterator it = m_urlMap.find (url);
    if (it != m_urlMap.end()){
        ListIterator itr = it->second;
        m_urlVisitedList.erase (itr);
        m_urlMap.erase (it);
    }
    m_urlVisitedList.push_back (url);
    ListIterator i = m_urlVisitedList.end ();
    m_urlMap.insert (pair<string, ListIterator> (url, --i));
}

vector<string> Browser::getHistory (){
    vector <string> v;
    for (ListRIterator it = m_urlVisitedList.rbegin (); it != m_urlVisitedList.rend(); ++it)
        v.push_back (*it);
    return v;    
}

int main() {
	Browser b;
	b.visitUrl ("google");
	b.visitUrl ("yahoo");
	b.visitUrl ("abc");
	b.visitUrl ("google");
	b.visitUrl ("def");
	b.visitUrl ("xyz");
	b.visitUrl ("google");
	b.visitUrl ("hotmail");
	b.visitUrl ("def");
	b.visitUrl ("google");
	b.visitUrl ("xyz");
	b.visitUrl ("google");
	b.visitUrl ("abc");
	vector<string> v = b.getHistory ();
	for (int i=0; i < v.size(); ++i)
	    cout << v[i] << endl;
	return 0;
}
