{
#include<bits/stdc++.h>
using namespace std;
class LRUCache
{
public:
    LRUCache(int );
 
    int get(int );
 
    void set(int , int );
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    int n;
    cin>>n;
    LRUCache *l  = new LRUCache(n);
    int q;
    cin>>q;
    for(int i=0;i<q;i++)
    {
        string a;
        cin>>a;
        if(a=="SET")
        {
            int aa,bb;
            cin>>aa>>bb;
            l->set(aa,bb);
        }else if(a=="GET")
        {
            int aa;
            cin>>aa;
            cout<<l->get(aa)<<" ";
        }
    }
    cout<<endl;
    }
}

}
/*This is a function problem.You only need to complete the function given below*/
/*The structure of the class is as follows 
class LRUCache
{
public:
    LRUCache(int );
    int get(int );
    void set(int , int );
};*/
/*You are required to complete below methods */
/*Inititalize an LRU cache with size N */
struct Node{
    int k;
    int v;
    list <int>::iterator it;
};
list <int> l;
map <int, pair<int, list <int>::iterator> > m;
int size = 0;
LRUCache::LRUCache(int N)
{
    size = N;
    m.clear ();
    l.clear ();
}
/*Sets the key x with value y in the LRU cache */
void LRUCache::set(int x, int y) 
{
    if (m.find (x) != m.end ()){
        list <int>::iterator it = m [x].second;
        l.erase (it);
        l.push_back (x);
        it = l.end ();
        --it;
        m [x].first = y;
        m [x].second = it;
    }
    else{
        if (l.size () >= size){
            m.erase (l.front ());
            l.pop_front ();
        }
        l.push_back (x);
        list <int>::iterator it = l.end ();
        --it;
        pair <int, list <int>::iterator> p (y, it);
        m.insert (make_pair (x, p));
    }
}
/*Returns the value of the key x if 
present else returns -1 */
int LRUCache::get(int x)
{
    if (m.find (x) != m.end ()){
        int v = m[x].first;
        if (size  >  1){
            list <int>::iterator it = m [x].second;
            l.erase (it);
            l.push_back (x);
            it = l.end ();
            --it;
            m [x].second = it;
        }
        return v;
    }
    return -1;    
}