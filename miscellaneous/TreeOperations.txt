#include <iostream>
#include <bits/stdc++.h>
using namespace std;

typedef struct node{
	int data;
	struct node* left;
	struct node* right;
	node (int data)
	: data (data)
	{
		left = NULL;
		right = NULL;
	}
}Node;

Node* root = NULL;

Node* createTree (int a[], int index, int n){
	if (index >= n)
		return NULL;
	Node* root = new Node (a [index]);
	root->left = createTree (a, 2*index + 1, n);
	root->right = createTree (a, 2*index + 2, n);
	return root;	
}

int findMax (Node* root){
	if (root == NULL)
		return 0;
	int max = root->data;
	int left = findMax (root->left);
	int right = findMax (root->right);
	
	int treeMax = left > right ? left : right;
	return max > treeMax ? max : treeMax;
}

int findMaxWithoutRecursion (Node* root){
	cout << "Without Recursion!" << endl;
	if (root == NULL)
		return 0;
	int max = 0;	
	queue <Node*> q;
	q.push (root);
	while (!q.empty ()){
		root = q.front ();
		q.pop ();
		if (max < root->data)
			max = root->data;
		if (root->left != NULL)
			q.push (root->left);
		if (root->right != NULL)
			q.push (root->right);
	}
	return max;
}

int SearchElement (Node* root, int ele){
	if (root == NULL)
		return -1;
	if (root->data == ele)	
		return ele;
	if (-1 != SearchElement (root->left, ele))
		return ele;
	if (-1 != SearchElement (root->right, ele))
		return ele;	
}

// void InsertElement (Node* root, int data, bool& done){
// 	if (done == true || root == NULL)
// 		return;
// 	if (root->data == -1){
// 		Node* temp = new Node (data);
// 		done = true;
// 		return temp;
// 	}
// 	root->left = InsertElement (root->left, done);
// 	root->right = InsertElement (root->right, done);
// }

void PrintLevelOrderReversed (Node* root){
    if (root == NULL)
        return;
    cout << "Level Order in Reverse Order" << endl;    
    stack <int> s;    
    queue <Node*> q;
    q.push (root);
    while (!q.empty ()){
        Node* temp = q.front ();
        q.pop ();
        s.push (temp->data);
        if (temp->right)
            q.push (temp->right);
        if (temp->left)
            q.push (temp->left);
    }
    
    while (!s.empty ()){
        cout << s.top () << " ";
        s.pop ();
    }
    cout << endl;
}

int PrintAncestor (Node* root, Node* t){
	if (root == NULL)
		return 0;
	if (root->data == t->data){
		cout << root->data << " ";
		return 1;
	}
	if (PrintAncestor (root->left, t) || PrintAncestor (root->right, t))
		cout << root->data << " ";
}

void ZigzagTraversal (Node* root){
    cout << "ZigZag Traversal: " << endl;
	if (root == NULL)
		return;
	stack <Node*> s1;
	stack <Node*> s2;
	int leftToRight = 1;
	s1.push (root);
	while (!s1.empty ()){
		Node* temp = s1.top ();
		s1.pop ();
		cout << temp->data << " ";
		if (leftToRight){
			if (temp->left)
				s2.push (temp->left);
			if (temp->right)
				s2.push (temp->right);
		}
		else {
			if (temp->right)
				s2.push (temp->right);
			if (temp->left)
				s2.push (temp->left);
		}
		if (s1.empty ()){
			stack <Node*> t = s1;
			s1 = s2;
			s2 = t;
			
			leftToRight = !leftToRight;
		}
	}
}


void VerticalSum (Node* root, map <int, int> &m, int col){
	if (root == NULL)
		return;
		
	if (m.find (col) == m.end ())
		m.insert (make_pair (col, root->data));
	else
		m [col] += root->data;
	
	VerticalSum (root->left, m, col-1);
	VerticalSum (root->right, m, col+1);
}

void PrintVerticalSum (Node* root){
	cout << "Vertical Sum" << endl;
	if (root == NULL)
		return;
	map <int, int> m;
	VerticalSum (root, m, 0);
	for (map <int, int>::iterator it = m.begin (); it != m.end (); ++it)
		cout << it->second << " ";
		
	cout << endl;	
}

int FindDiameter (Node* root, int* d){
	if (root == NULL)
		return 0;
	int left = FindDiameter (root->left, d);
	int right = FindDiameter (root->right, d);
	int m = left + right + 1;
	if (m > *d)
		*d = m;
	return max (left, right) + 1;
}

int Diameter (Node* root){
	if (root == NULL)
		return 0;
	int d = 0;
	FindDiameter (root, &d);
	return d;
}

/* Should convert tree to its mirror */
void mirror(Node* node) 
{
     if (node == NULL)
        return;
     mirror (node->left);
     mirror (node->right);
     Node* temp = node->left;
     node->left = node->right;
     node->right = temp;
}

int main ()
{
	int n = 7;
	int a [n] = {0};
	for (int i = 0; i < n; ++i) a[i] = (i+1);// * rand ();
// 	a [6] = -1;
	root = createTree (a, 0, n);
	bool recursiveTraversal = false;
	
	cout << "Max: " << (recursiveTraversal ? findMax (root) : findMaxWithoutRecursion (root)) << endl;
	cout << "Searched Element: " << SearchElement (root, 6) << endl;
// 	Node* temp = new Node (7);
// 	PrintAncestor (root, temp);
// 	cout << endl;
// 	PrintLevelOrderReversed (root);
// 	ZigzagTraversal (root);
    // PrintVerticalSum (root);
    cout << "Diameter: " << Diameter (root) << endl;
	return 0;
} 