/*This is a function problem.You only need to complete the function given below*/
/* Main function to do heap sort. This function uses buildHeap()
   and heapify()
void heapSort(int arr[], int n)  {
    buildHeap(arr, n);
    for (int i=n-1; i>=0; i--)  {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
} */
// The functions should be written in a way that array become sorted 
// in increasing order when above heapSort() is called.
// To heapify a subtree rooted with node i which is  an index in arr[]. 
// n is size of heap. This function  is used in above heapSor()
void heapify(int arr[], int n, int i)  {
      if (i < 0 || i >= n)
            return;
      int l = 2*i + 1;
      int r = 2*i + 2;
      
      int k = i;
      if (l < n && arr [l] > arr [i])
            k = l;
      if (r < n && arr [r] > arr [k])
            k = r;
      if (k != i){
          int temp = arr [i];
          arr [i] = arr [k];
          arr [k] = temp;
          heapify (arr, n, k);
      }        
}
// Rearranges input array so that it becomes a max heap
void buildHeap(int arr[], int n)  { 
    for (int i=n/2; i >=0; --i)
        heapify (arr, n, i);
}