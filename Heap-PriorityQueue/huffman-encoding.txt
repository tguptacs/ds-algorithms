#include <iostream>
#include <bits/stdc++.h>
using namespace std;
//abcdef
//5 9 12 13 16 45

typedef struct node
{
    char data;
    int freq;
    node* left;
    node* right;
} Node;

void printValues (Node* n, string s)
{
    if (n == NULL)
        return;
    if (n->data != NULL)
    {
        cout << s << " ";
    }
    printValues (n->left, s + "0");
    printValues (n->right, s + "1");
}
struct compare
{
    bool operator() (const Node* l, const Node* r) const
    {
        return l->freq > r->freq;
    }
};
void printHuffmanCodes (string s, int fr [], int n)
{
    priority_queue <Node*, vector <Node*>, compare> pq;
    for (int i = 0; i < n; ++i)
    {
        char t = s[i];
        Node* n = new Node();
        n->data = t;
        n->freq = fr [i];
        n->left = NULL;
        n->right = NULL;
        pq.push (n);
    }
     while (!pq.empty () && pq.size () > 1)
    {
        Node* l = pq.top (); pq.pop ();
        Node* r = pq.top (); pq.pop ();
        // cout << l->freq << " " << r->freq << endl;
        int sum = l->freq + r->freq;
        Node* nw = new Node();
        nw->data = NULL;
        nw->freq = sum;
        nw->left = l;
        nw->right = r;
        pq.push (nw);
    }
    Node* nt= pq.top (); pq.pop ();
    printValues (nt, "");
}

int main() {
    int t = 0;
    cin >> t;
    while (t-- > 0)
    {
        string s;
        cin >> s;
        int n = s.length ();
        int fr [n] = {0};
        for (int i = 0; i < n; ++i)
            cin >> fr [i];
        printHuffmanCodes (s, fr, n);
        cout << endl;
    }
	return 0;
}